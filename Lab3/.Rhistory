bubble.sort <- function(a) {
n <- length(a)
if (n == 1) return(a)
okay <- FALSE
while(!okay) {
okay <- TRUE
for (i in 1:(n-1)) {
if(a[i]>a[i+1])
{
c <- a[i+1]
a[i+1]<- a[i]
a[i] <- c
okay <- FALSE
}
}
}
}
bubble.sort(c(2,3,1))
<- bubble.sort(c(2,3,1))
bubble.sort(c(2,3,1))
bubble.sort <- function(a) {
n <- length(a)
if (n == 1) return(a)
okay <- FALSE
while(!okay) {
okay <- TRUE
for (i in 1:(n-1)) {
if(a[i]>a[i+1])
{
c <- a[i+1]
a[i+1]<- a[i]
a[i] <- c
okay <- FALSE
}
}
}
return(a)
}
a <- bubble.sort(c(2,3,1))
a
a <- bubble.sort(c(2,3,1,56,1,74,123,11,23,12,12))
a
system.time(bubble.sort(c(2,3,1,56,1,74,123,11,23,12,12)))
system.time(bubble.sort(c(1000:1)))
system.time(bubble.sort(c(10000:1)))
qstort <- function(a) {
if(length(a) > 1) {
less <- a[a<pivot]
equals <- a[a==pivot]
greater <- a[a>pivot]
a <- concat(qsort(less), equals, qsort(greater))
}
}
return(a)
}
qstort <- function(a) {
if(length(a) > 1) {
less <- a[a<pivot]
equals <- a[a==pivot]
greater <- a[a>pivot]
a <- concat(qsort(less), equals, qsort(greater))
}
return(a)
}
b <- qsort(c(2,3,1,56,1,74,123,11,23,12,12))
qsort <- function(a) {
if(length(a) > 1) {
less <- a[a<pivot]
equals <- a[a==pivot]
greater <- a[a>pivot]
a <- concat(qsort(less), equals, qsort(greater))
}
return(a)
}
b <- qsort(c(2,3,1,56,1,74,123,11,23,12,12))
qsort <- function(a) {
if(length(a) > 1) {
pivot <-a[1]
less <- a[a<pivot]
equals <- a[a==pivot]
greater <- a[a>pivot]
a <- concat(qsort(less), equals, qsort(greater))
}
return(a)
}
b <- qsort(c(2,3,1,56,1,74,123,11,23,12,12))
qsort <- function(a) {
if(length(a) > 1) {
pivot <-a[1]
less <- a[a<pivot]
equals <- a[a==pivot]
greater <- a[a>pivot]
a <- qsort(less) +  equals + qsort(greater)
}
return(a)
}
b <- qsort(c(2,3,1,56,1,74,123,11,23,12,12))
b
qsort(c(2,3,1,56,1,74,123,11,23,12,12))
qsort(c(2,1))
qsort(1)
setwd("C:/Users/user/Desktop/Proffesional_Practice/Lab3")
# SETUP
knitr::opts_chunk$set(echo = TRUE, fig.width = 8, fig.height = 5)
library(dplyr)
library(lubridate)
library(ggplot2)
require(dplyr)
require(ggplot2)
library(readxl)
#DATA
Spotify <- read_excel("edited_spotify.xlsx")
MyData = {Spotify %>%
group_by(Artist,AlbumName,AlbumReleaseDate) %>%
summarize(AlbumValence = mean(TrackValence),
AlbumSpeechiness = mean(TrackSpeechiness),
AlbumLiveness = mean(TrackLiveness) )}
MyData$AlbumReleaseDate = parse_date_time(MyData$AlbumReleaseDate,orders=c("y","ym","ymd"))
plotvalence.date <- {MyData %>% ggplot(aes(x = AlbumReleaseDate,
y = AlbumValence))} +
geom_point()  + geom_smooth()
plotvalence.date
plotvalspeech.date <- { MyData %>% ggplot(aes(x = AlbumReleaseDate,
y = AlbumValence))} + geom_point(aes(size=AlbumSpeechiness))
plotvalspeech.date + scale_x_discrete(breaks = c("1960", "1970", "1980", "1991","2000", "2010")) + geom_smooth()
plotvalspeech.date <- { MyData %>% ggplot(aes(x = AlbumReleaseDate,
y = AlbumValence))} + geom_point(aes(size=AlbumSpeechiness), shape=0)
plotvalspeech.date + scale_x_discrete(breaks = c("1960", "1970", "1980", "1991","2000", "2010")) + geom_smooth()
plotvalspeech.date <- { MyData %>% ggplot(aes(x = AlbumReleaseDate,
y = AlbumValence))} + geom_point(aes(size=AlbumSpeechiness), shape=15)
plotvalspeech.date + scale_x_discrete(breaks = c("1960", "1970", "1980", "1991","2000", "2010")) + geom_smooth()
plotvalspeech.date <- { MyData %>% ggplot(aes(x = AlbumReleaseDate,
y = AlbumValence, shape = rap, color = rap))} + geom_point(aes(size=AlbumSpeechiness))
plotvalspeech.date + scale_x_discrete(breaks = c("1960", "1970", "1980", "1991","2000", "2010")) + geom_smooth()
MyData$rap <- "no"
MyData$rap[MyData$AlbumSpeechiness>0.2] <- "yes"
plotvalspeech.date <- { MyData %>% ggplot(aes(x = AlbumReleaseDate,
y = AlbumValence, shape = rap, color = rap))} + geom_point(aes(size=AlbumSpeechiness))
plotvalspeech.date + scale_x_discrete(breaks = c("1960", "1970", "1980", "1991","2000", "2010")) + geom_smooth()
plotvalspeech.date <- { MyData %>% ggplot(aes(x = AlbumReleaseDate,
y = AlbumValence, shape = rap, color = rap))} + geom_point(aes(size=AlbumSpeechiness))
plotvalspeech.date + scale_x_discrete(breaks = c("1960", "1970", "1980", "1991","2000", "2010")) + geom_smooth(se=FALSE)
plotvalspeech.date + scale_x_discrete(breaks = c("1960", "1970", "1980", "1991","2000", "2010")) + geom_smooth(se=FALSE)
MyData$AlbumReleaseDate <- format(as.Date(MyData$AlbumReleaseDate, format="%Y-%m-%d"),"%Y")
plotvalspeech.date <- { MyData %>% ggplot(aes(x = AlbumReleaseDate,
y = AlbumValence, shape = rap, color = rap))} + geom_point(aes(size=AlbumSpeechiness))
plotvalspeech.date + scale_x_discrete(breaks = c("1960", "1970", "1980", "1991","2000", "2010")) + geom_smooth(se=FALSE)
plotvalspeech.date + scale_x_discrete(breaks = c("1960", "1970", "1980", "1991","2000", "2010")) + geom_smooth(method = lm, se=FALSE)
setwd("C:/Users/user/Desktop/Programming/Lab3")
install.packages("Matrix")
library(Matrix)
load("web-google.rdata")
View(Spotify)
load("web-google.rdata")
n <- max(links)
numlinks <- dim(links)
A.sprarse <- sparseMatrix(i=links[,1], j=links[,2], x=rep(1, numlinks), dims = c(n,n))
load("web-google.rdata")
A.sprarse <- sparseMatrix(i=links[,1], j=links[,2],
x=rep(1, numlinks), dims = c(n,n))
A.sparse <- sparseMatrix(i=links[,1],
j=links[,2], x=rep(1,numlinks), dims=c(n,n))
View(links)
load("web-google.rdata")
n <- max(links)
A.sparse <- sparseMatrix(i=links[,1],
j=links[,2], x=rep(1,numlinks), dims=c(n,n))
numlinks <- dim(links)[1]
A.sparse <- sparseMatrix(i=links[,1],
j=links[,2], x=rep(1,numlinks), dims=c(n,n))
outlinks <- rep(0,n)
?rep
outlinks[links[i,1]] <- outlinks[links[i, 1]] +1
for (i in 1:numlinks) {
outlinks[links[i,1]] <- outlinks[links[i, 1]] +1
}
d <- outlinks ==0
d
H.sparse <- sparseMatri(i=links[,1],
j=links[,2], x=vsH, dims = c(n,n))
d <- outlinks == 0
vsH <- rep(o, numlinks)
for( k in 1:numlinks) {
vsH[k] <- 1/outlinks[links[k,1]]
}
H.sparse <- sparseMatri(i=links[,1],
j=links[,2], x=vsH, dims = c(n,n))
d <- outlinks == 0
vsH <- rep(o, numlinks)
for( k in 1:numlinks) {
vsH[k] <- 1/outlinks[links[k,1]]
}
H.sparse <- sparseMatrix(i=links[,1],
j=links[,2], x=vsH, dims = c(n,n))
vsH <- rep(0, numlinks)
for( k in 1:numlinks) {
vsH[k] <- 1/outlinks[links[k,1]]
}
H.sparse <- sparseMatrix(i=links[,1],
j=links[,2], x=vsH, dims = c(n,n))
alpha = 0.85
w <- rep(1/n, n)
p <- log(1+(1:n)/sum(log(1+1:n)))
m<- 150
View(links)
View(A.sparse)
diffs <- rep(0,n)
diffs
w
vsH
muT
diffs <- rep(0,n)
muT <- t(rep(1/n, n))
muT
diffs <- rep(0,n)
View(muT)
View(muT)
View(muT)
for (i in 1:m) {
muT.old <- muT
muT = muT.old%*%G
}
