gradient.descent(f, gradf, c(3, 4), 40000, 0.001)
gradient.descent(f, gradf, c(3, 4), 40000, 0.0000001)
gradient.descent(f, gradf, c(3, 4), 40000, 0.005)
gradient.descent(f, gradf, c(3, 4), 40000, 0.002)
gradient.descent(f, gradf, c(3, 4), 40000, 0.0001)
gradient.descent(f, gradf, c(3, 4), 40000, 0.00001)
gradient.descent(f, gradf, c(3, 4), 40000, 0.0007)
gradient.descent(f, gradf, c(3, 4), 40000, 0.0009)
gradient.descent(f, gradf, c(3, 4), 40000, 0.0009)
gradient.descent(f, gradf, c(3, 4), 40000, 0.0008)
gradient.descent(f, gradf, c(3, 4), 40000, 0.0006)
gradient.descent(f, gradf, c(3, 4), 40000, 0.0007)
?cat
print(c(1, " : ", 1, " ", f(c(1,1)), "\n"))
print(1, ".")
print(list(1, " : ", x1, " ", f(x1), "\n"))
print(list(1, " : ", 1, " ", f(c(1,1)), "\n"))
cat(1, " : ", 2, " ", f(c(32,21)), "\n"))
cat(1, " : ", 2, " ", f(c(32,21)), "\n")
gradient.momentum <- function(f, gradf, x0, iterations = 1000, eta = 0.2, alpha) {
x1 <- x0
x2 <- x1 - eta * gradf(x1)
cat(1, " : ", x1, ", ", f(x1), "\n")
cat(2, " : ", x2, ", ", f(x2), "\n")
for( i in 3:iterations) {
x <- x2 - eta * gradf(x2) + alpha * (x2 - x1)
x1 <- x2
x2 <- x
cat(i, " : ", x, ", ", f(x), "\n")
}
x
}
gradient.momentum(f, gradf, c(3,4), 50, 0.000491323, 0.029999)
gradient.descent.momentum(f, gradf, c(3,4), 50, 0.05, 0.05)
gradient.momentum(f, gradf, c(3,4), 50, 0.05, 0.05)
gradient.momentum(f, gradf, c(3,4), 50, 0.0005, 0.03)
gradient.momentum(f, gradf, c(3,4), 50, 0.000491323, 0.03)
gradient.momentum(f, gradf, c(3,4), 50, 0.0005, 0.03)
gradient.momentum(f, gradf, c(3,4), 50, 0.0004, 0.03)
gradient.momentum(f, gradf, c(3,4), 50, 0.00048, 0.03)
gradient.momentum(f, gradf, c(3,4), 50, 0.00049, 0.03)
gradient.momentum(f, gradf, c(3,4), 1000, 0.0005, 0.03)
gradient.momentum(f, gradf, c(3,4), 10000, 0.00049, 0.03)
gradient.momentum(f, gradf, c(3,4), 100000, 0.00049, 0.03)
gradient.momentum(f, gradf, c(3,4), 100000, 0.0005, 0.03)
load("mnist.tiny.RData")
train.X=train.X/255
test.X=test.X/255
setwd("~/GitHub/ST340/Assignment3")
load("mnist.tiny.RData")
train.X=train.X/255
test.X=test.X/255
grid.raster(array(aperm(array(train.X[1:50,],c(5,10,28,28)),c(4,1,3,2)),c(140,280)),
interpolate=FALSE)
library(grid)
grid.raster(array(aperm(array(train.X[1:50,],c(5,10,28,28)),c(4,1,3,2)),c(140,280)),
interpolate=FALSE)
library(e1071)
svm(train.X,train.labels,type="C-classification",kernel="linear",cross=3)$tot.accuracy
svm(train.X,train.labels,type="C-classification",kernel="poly",
degree=2,coef=1,cross=3)$tot.accuracy
svm(train.X,train.labels,type="C-classification",kernel="poly",degree=5,coef=1,cross=3)$tot.accuracy
svm(train.X,train.labels,type="C-classification",kernel="poly",degree=10,coef=1,cross=3)$tot.accuracy
svm(train.X,train.labels,type="C-classification",kernel="poly",degree=15,coef=1,cross=3)$tot.accuracy
svm(train.X,train.labels,type="C-classification",kernel="poly",degree=13,coef=1,cross=3)$tot.accuracy
svm(train.X,train.labels,type="C-classification",kernel="poly",degree=10,coef=1,cross=3)$tot.accuracy
svm(train.X,train.labels,type="C-classification",kernel="poly",degree=16,coef=1,cross=3)$tot.accuracy
set.seed(1)
svm(train.X, train.labels, type = "C-classification", kernel = "radial",
gamma = 1, coef = 1, cross = 3)$tot.accuracy
set.seed(1)
svm(train.X, train.labels, type = "C-classification", kernel = "radial",
gamma = 0.5, coef = 1, cross = 3)$tot.accuracy
svm(train.X, train.labels, type = "C-classification", kernel = "radial",
gamma = 0.01, coef = 1, cross = 3)$tot.accuracy
svm(train.X, train.labels, type = "C-classification", kernel = "radial",
gamma = 0.03, coef = 1, cross = 3)$tot.accuracy
svm(train.X, train.labels, type = "C-classification", kernel = "radial",
gamma = 0.04, coef = 1, cross = 3)$tot.accuracy
svm(train.X, train.labels, type = "C-classification", kernel = "radial",
gamma = 0.02, coef = 1, cross = 3)$tot.accuracy
log.C.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
log.gamma.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
comb <- matrix(ncol = 2, nrow = length(log.gamma.range) * length(log.C.range))
count <- 0
results <- c()
for(i in 1:length(log.gamma.range)) {
for(j in 1: log.C.range) {
count <- cout + 1
comb[count, ] <- c(gamma = exp(log.C.range[j]), exp(log.gamma.range[i]))
}
}
for ( i in 1:nrow(comb)) {
accuracy <- svm(train.X, train.labels, type = "C-classification", kernel = "rad",
cost = comb[i,1], gamma = comb[i,2], degree = 2, coef = 1)$tot.accuracy
results <- c(results, accuracy)
}
max(results)
log.C.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
log.gamma.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
comb <- matrix(ncol = 2, nrow = length(log.gamma.range) * length(log.C.range))
count <- 0
results <- c()
for(i in 1:length(log.gamma.range)) {
for(j in 1: log.C.range) {
count <- count + 1
comb[count, ] <- c(gamma = exp(log.C.range[j]), exp(log.gamma.range[i]))
}
}
for ( i in 1:nrow(comb)) {
accuracy <- svm(train.X, train.labels, type = "C-classification", kernel = "rad",
cost = comb[i,1], gamma = comb[i,2], degree = 2, coef = 1)$tot.accuracy
results <- c(results, accuracy)
}
max(results)
results
log.C.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
log.gamma.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
comb <- matrix(ncol = 2, nrow = length(log.gamma.range) * length(log.C.range))
count <- 0
results <- c()
for(i in 1:length(log.gamma.range)) {
for(j in 1: (log.C.range0)) {
count <- count + 1
comb[count, ] <- c(gamma = exp(log.C.range[j]), exp(log.gamma.range[i]))
}
}
for ( i in 1:nrow(comb)) {
accuracy <- svm(train.X, train.labels, type = "C-classification", kernel = "rad",
cost = comb[i,1], gamma = comb[i,2], degree = 2, coef = 1)$tot.accuracy
results <- c(results, accuracy)
}
max(results)
log.C.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
log.gamma.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
comb <- matrix(ncol = 2, nrow = length(log.gamma.range) * length(log.C.range))
count <- 0
results <- c()
for(i in 1:length(log.gamma.range)) {
for(j in 1: (log.C.range)) {
count <- count + 1
comb[count, ] <- c(gamma = exp(log.C.range[j]), exp(log.gamma.range[i]))
}
}
for ( i in 1:nrow(comb)) {
accuracy <- svm(train.X, train.labels, type = "C-classification", kernel = "rad",
cost = comb[i,1], gamma = comb[i,2], degree = 2, coef = 1)$tot.accuracy
results <- c(results, accuracy)
}
max(results)
log.C.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
log.gamma.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
comb <- matrix(ncol = 2, nrow = length(log.gamma.range) * length(log.C.range))
count <- 0
results <- c()
for(i in 1:length(log.gamma.range)) {
for(j in 1: (log.C.range)) {
count <- count + 1
comb[count, ] <- c(gamma = exp(log.C.range[j]), exp(log.gamma.range[i]))
}
}
for ( i in 1:nrow(comb)) {
accuracy <- svm(train.X, train.labels, type = "C-classification", kernel = "rad",
cost = comb[i,1], gamma = comb[i,2], degree = 2, coef = 1, cross = 3)$tot.accuracy
results <- c(results, accuracy)
}
max(results)
results
log.C.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
log.gamma.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
comb <- matrix(ncol = 2, nrow = length(log.gamma.range) * length(log.C.range))
count <- 0
results <- c()
for(i in 1:length(log.C.range)) {
for(j in 1: (log.range.range)) {
count <- count + 1
comb[count, ] <- c(gamma = exp(log.C.range[i]), exp(log.gamma.range[j]))
}
}
for ( i in 1:nrow(comb)) {
accuracy <- svm(train.X, train.labels, type = "C-classification", kernel = "rad",
cost = comb[i,1], gamma = comb[i,2], degree = 2, coef = 1, cross = 3)$tot.accuracy
results <- c(results, accuracy)
}
max(results)
log.C.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
log.gamma.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
comb <- matrix(ncol = 2, nrow = length(log.gamma.range) * length(log.C.range))
count <- 0
results <- c()
for(i in 1:length(log.C.range)) {
for(j in 1: (log.range.range)) {
count <- count + 1
comb[count, ] <- c(gamma = exp(log.C.range[i]), exp(log.gamma.range[j]))
}
}
log.C.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
log.gamma.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
comb <- matrix(ncol = 2, nrow = length(log.gamma.range) * length(log.C.range))
count <- 0
results <- c()
for(i in 1:length(log.C.range)) {
for(j in 1: (log.gamma.range)) {
count <- count + 1
comb[count, ] <- c(gamma = exp(log.C.range[i]), exp(log.gamma.range[j]))
}
}
for ( i in 1:nrow(comb)) {
accuracy <- svm(train.X, train.labels, type = "C-classification", kernel = "rad",
cost = comb[i,1], gamma = comb[i,2], degree = 2, coef = 1, cross = 3)$tot.accuracy
results <- c(results, accuracy)
}
max(results)
log.C.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
log.gamma.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
comb <- matrix(ncol = 2, nrow = length(log.gamma.range) * length(log.C.range))
count <- 0
results <- c()
for(i in 1:length(log.C.range)) {
for(j in 1: (log.gamma.range)) {
count <- count + 1
comb[count, ] <- c(gamma = exp(log.C.range[i]), exp(log.gamma.range[j]))
}
}
exp(log.C.range[2])
log.C.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
log.gamma.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
comb <- matrix(ncol = 2, nrow = length(log.gamma.range) * length(log.C.range))
count <- 0
results <- c()
for(i in 1:length(log.C.range)) {
for(j in 1: (log.gamma.range)) {
count <- count + 1
comb[count, ] <- c(gamma = exp(log.C.range[i]), exp(log.gamma.range[j]))
}
}
comb <- matrix(ncol = 2, nrow = length(log.gamma.range) * length(log.C.range))
comb
comb[count, ] <- c(gamma = exp(log.C.range[3]), exp(log.gamma.range[2]))
comb
comb <- matrix(ncol = 2, nrow = length(log.gamma.range) * length(log.C.range))
count <- 0
results <- c()
for(i in 1:length(log.C.range)) {
for(j in 1: (log.gamma.range)) {
count <- count + 1
comb[count, ] <- c(gamma = exp(log.C.range[i]), exp(log.gamma.range[j]))
}
}
log.C.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
log.gamma.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
comb <- matrix(ncol = 2, nrow = length(log.gamma.range) * length(log.C.range))
count <- 0
results <- c()
for(i in 1:length(log.C.range)) {
for(j in 1: (log.gamma.range)) {
count <- count + 1
comb[count, ] <- c(gamma = exp(log.C.range[i]), exp(log.gamma.range[j]))
}
}
for ( i in 1:nrow(comb)) {
accuracy <- svm(train.X, train.labels, type = "C-classification", kernel = "rad",
cost = comb[i,1], gamma = comb[i,2], degree = 2, coef = 1, cross = 3)$tot.accuracy
results <- c(results, accuracy)
}
max(results)
log.C.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
log.gamma.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
comb <- matrix(ncol = 2, nrow = length(log.gamma.range) * length(log.C.range))
count <- 0
results <- c()
for(i in 1:length(log.C.range)) {
for(j in 1:length(log.gamma.range)) {
count <- count + 1
comb[count, ] <- c(gamma = exp(log.C.range[i]), exp(log.gamma.range[j]))
}
}
for ( i in 1:nrow(comb)) {
accuracy <- svm(train.X, train.labels, type = "C-classification", kernel = "rad",
cost = comb[i,1], gamma = comb[i,2], degree = 2, coef = 1, cross = 3)$tot.accuracy
results <- c(results, accuracy)
}
max(results)
row <- which.max(results)
comb[row, ]
comb
log.C.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
log.gamma.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
comb <- matrix(ncol = 2, nrow = length(log.gamma.range) * length(log.C.range))
count <- 0
results <- c()
for(i in 1:length(log.C.range)) {
for(j in 1:length(log.gamma.range)) {
count <- count + 1
comb[count, ] <- c(gamma = exp(log.C.range[i]), exp(log.gamma.range[j]))
}
}
comb
log.C.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
log.gamma.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
comb <- matrix(ncol = 2, nrow = length(log.gamma.range) * length(log.C.range))
count <- 0
results <- c()
for(i in 1:length(log.C.range)) {
for(j in 1:length(log.gamma.range)) {
count <- count + 1
comb[count, ] <- c(gamma = log.C.range[i], log.gamma.range[j])
}
}
comb\
comb
log.C.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
log.gamma.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
log.C.range
exp(log.C.range)
log.C.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
log.gamma.range <- log(c(0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000))
comb <- matrix(ncol = 2, nrow = length(log.gamma.range) * length(log.C.range))
count <- 0
results <- c()
for(i in 1:length(log.C.range)) {
for(j in 1:length(log.gamma.range)) {
count <- count + 1
comb[count, ] <- c(gamma = exp(log.C.range[i]), exp(log.gamma.range[j]))
}
}
for ( i in 1:nrow(comb)) {
accuracy <- svm(train.X, train.labels, type = "C-classification", kernel = "rad",
cost = comb[i,1], gamma = comb[i,2], degree = 2, coef = 1, cross = 3)$tot.accuracy
results <- c(results, accuracy)
}
log.C.range <- log(c(0.001, 0.01, 0.1, 1, 10, 100))
log.gamma.range <- log(c(0.001, 0.01, 0.1, 1, 10, 100))
comb <- matrix(ncol = 2, nrow = length(log.gamma.range) * length(log.C.range))
count <- 0
results <- c()
for(i in 1:length(log.C.range)) {
for(j in 1:length(log.gamma.range)) {
count <- count + 1
comb[count, ] <- c(gamma = exp(log.C.range[i]), exp(log.gamma.range[j]))
}
}
for ( i in 1:nrow(comb)) {
accuracy <- svm(train.X, train.labels, type = "C-classification", kernel = "rad",
cost = comb[i,1], gamma = comb[i,2], degree = 2, coef = 1, cross = 3)$tot.accuracy
results <- c(results, accuracy)
}
row <- which.max(results)
comb[row, ]
max(results)
results
install.packages("model")
install.packages("tensorflow")
import tensorflow as tf
import(tensorflow)
import tensorflow::all_dims()
accuracy <- sum(diag(table(test.labels, test.predictions)))/sum(table(test.labels, test.predictions))
model <- svm(train.X, train.labels, type = "C-classification", kernel = rad,
cost = 100, gamma = 0.01, degree = 2, coef = 1)
test.predictions <- as.vector(predict(model, test.X), mode = "numeric")
accuracy <- sum(diag(table(test.labels, test.predictions)))/sum(table(test.labels, test.predictions))
model <- svm(train.X, train.labels, type = "C-classification", kernel = "rad",
cost = 100, gamma = 0.01, degree = 2, coef = 1)
test.predictions <- as.vector(predict(model, test.X), mode = "numeric")
accuracy <- sum(diag(table(test.labels, test.predictions)))/sum(table(test.labels, test.predictions))
accuracy
deriv(~f, "x[1]")
deriv(~(x[1]-1)^2 + 100*(x[1]^2-x[2])^2, 'x[1')
deriv(~(x[1]-1)^2 + 100*(x[1]^2-x[2])^2, 'x[1]')
deriv(~(x_1-1)^2 + 100*(x_1^2-x[2])^2, 'x_1')
deriv(~(x_1-1)^2 + 100*(x_1^2-x_2)^2, 'x_1')
install.packages("Deriv")
Deriv::Deriv((x_1-1)^2 + 100*(x_1^2-x_2)^2, x_1)
Deriv::Deriv((x_1-1)^2 + 100*(x_1^2-x_2)^2, x_1)
f <- function(x) (x[1]-1)^2 + 100*(x[1]^2-x[2])^2
f
Deriv(f(x1, x2))
Deriv::Deriv(f(c(x1, x2)))
Deriv::Deriv((x[1]-1)^2 + 100*(x[1]^2-x[2])^2)
gradient.descent(f, gradf, c(3, 4), 10000, 0.0007)
gradient.descent(f, gradf, c(3, 4), 20000, 0.0007)
gradient.descent(f, gradf, c(3, 4), 50000, 0.0007)
# Gradient Descent function given
gradient.descent <- function(f, gradf, x0, iterations=1000, eta=0.2) {
x<-x0
for (i in 1:iterations) {
cat(i,"/",iterations,": ",x," ",f(x),"\n")
x<-x-eta*gradf(x)
}
x
}
# example given
f <-function(x) { sum(x^2) }
gradf<-function(x) { 2*x }
gradient.descent(f,gradf,c(10,20),10,0.2)
gradient.ascent <- function(f, df, x0, iterations=1000, eta=0.2) {
gradient.descent(f, df, x0, iterations, -eta)
}
f <-function(x) { (1+x^2)^(-1) }
gradf<-function(x) { -2*x*(1+x^2)^(-2) }
gradient.ascent(f,gradf,3,40,0.5)
f <- function(x) (x[1]-1)^2 + 100*(x[1]^2-x[2])^2
gradf <- function(x) {
return (c( 2 * x[1] - 2 + 400 * x[1]^3 - 400 * x[2] * x[1],
-200 * x[1]^2 + 200* x[2]))
}
gradient.momentum <- function(f, gradf, x0, iterations = 1000, eta = 0.2, alpha) {
x1 <- x0
x2 <- x1 - eta * gradf(x1)
cat(1, " : ", x1, ", ", f(x1), "\n")
cat(2, " : ", x2, ", ", f(x2), "\n")
for( i in 3:iterations) {
x <- x2 - eta * gradf(x2) + alpha * (x2 - x1)
x1 <- x2
x2 <- x
cat(i, " : ", x, ", ", f(x), "\n")
}
x
}
gradient.momentum(f, gradf, c(3,4), 50, 0.0005, 0.03)
gradient.momentum(f, gradf, c(3,4), 50, 0.00049, 0.03)
gradient.momentum(f, gradf, c(3,4), 50, 0.00049, 0.03)
gradient.momentum(f, gradf, c(3,4), 100, 0.00049, 0.03)
gradient.momentum(f, gradf, c(3,4), 10000, 0.00049, 0.03)
gradient.momentum <- function(f, gradf, x0, iterations = 1000, eta = 0.2, alpha) {
x1 <- x0
x2 <- x1 - eta * gradf(x1)
cat(1, " : ", x1, ", ", f(x1), "\n")
cat(2, " : ", x2, ", ", f(x2), "\n")
for( i in 3:iterations) {
x <- x2 - eta * gradf(x2) + alpha * (x2 - x1)
x1 <- x2
x2 <- x
if(i < 20) {}
cat(i, " : ", x, ", ", f(x), "\n")
}
}
x
}
gradient.momentum(f, gradf, c(3,4), 100000, 0.00049, 0.03)
gradient.momentum <- function(f, gradf, x0, iterations = 1000, eta = 0.2, alpha) {
x1 <- x0
x2 <- x1 - eta * gradf(x1)
cat(1, " : ", x1, ", ", f(x1), "\n")
cat(2, " : ", x2, ", ", f(x2), "\n")
for( i in 3:iterations) {
x <- x2 - eta * gradf(x2) + alpha * (x2 - x1)
x1 <- x2
x2 <- x
if(i < 20) {
cat(i, " : ", x, ", ", f(x), "\n")
}
}
x
}
gradient.momentum(f, gradf, c(3,4), 100000, 0.00049, 0.03)
gradient.momentum(f, gradf, c(3,4), 1000, 0.00049, 0.03)
gradient.momentum(f, gradf, c(3,4), 10000, 0.00049, 0.03)
gradient.momentum(f, gradf, c(3,4), 20000, 0.00049, 0.03)
gradient.descent <- function(f, gradf, x0, iterations=1000, eta=0.2) {
x<-x0
for (i in 1:iterations) {
if(i<50) {
cat(i,"/",iterations,": ",x," ",f(x),"\n")
x<-x-eta*gradf(x)
}}
x
}
gradient.momentum(f, gradf, c(3,4), 20000, 0.00049, 0.03)
gradient.descent(f, gradf, c(3, 4), 30000, 0.0007)
gradient.momentum <- function(f, gradf, x0, iterations = 1000, eta = 0.2, alpha) {
x1 <- x0
x2 <- x1 - eta * gradf(x1)
cat(1, " : ", x1, ", ", f(x1), "\n")
cat(2, " : ", x2, ", ", f(x2), "\n")
for( i in 3:iterations) {
x <- x2 - eta * gradf(x2) + alpha * (x2 - x1)
x1 <- x2
x2 <- x
if(i < 20) {
cat(i, " : ", x, ", ", f(x), "\n")
}
}
x
}
gradient.descent(f, gradf, c(3, 4), 30000, 0.0007)
gradient.descent(f, gradf, c(3, 4), 50000, 0.0007)
gradient.descent(f, gradf, c(3, 4), 50000, 0.0009)
gradient.descent(f, gradf, c(3, 4), 50000, 0.0007)
gradient.descent(f, gradf, c(3, 4), 100000, 0.0007)
gradf
gradient.descent(f, gradf, c(3, 4), 100000, 0.0007)
gradient.descent(f, gradf, c(3, 4), 50, 0.0007)
gradient.momentum <- function(f, gradf, x0, iterations = 1000, eta = 0.2, alpha) {
x1 <- x0
x2 <- x1 - eta * gradf(x1)
cat(1, " : ", x1, ", ", f(x1), "\n")
cat(2, " : ", x2, ", ", f(x2), "\n")
for( i in 3:iterations) {
x <- x2 - eta * gradf(x2) + alpha * (x2 - x1)
x1 <- x2
x2 <- x
if(i < 20) {
cat(i, " : ", x, ", ", f(x), "\n")
}
}
x
}
gradient.descent(f, gradf, c(3, 4), 50, 0.0007)
gradient.descent(f, gradf, c(3, 4), 50, 0.0007)
x
gradient.momentum(f, gradf, c(3,4), 20000, 0.00049, 0.03)
