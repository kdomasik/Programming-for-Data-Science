setwd("~/GitHub/ST340/Assignment2")
load("20newsgroups.RData")
install.packages("mvtnorm")
library(mvtnorm)
mus.actual <- matrix(0,3,2)
mus.actual[1,] <- c(0,0)
mus.actual[2,] <- c(4,4)
mus.actual[3,] <- c(-4,4)
Sigmas.actual <- list()
for (k in 1:K) {
mtx <- matrix(1,2,2)
mtx[1,2] <- runif*2 - 1
mtx[2,1] <- mtx[1,2]
Sigmas.actual[[k]] <- mtx* exp(rnorm(1))
}
K <-3
Sigmas.actual <- list()
for (k in 1:K) {
mtx <- matrix(1,2,2)
mtx[1,2] <- runif*2 - 1
mtx[2,1] <- mtx[1,2]
Sigmas.actual[[k]] <- mtx* exp(rnorm(1))
}
Sigmas.actual <- list()
for (k in 1:K) {
mtx <- matrix(1,2,2)
mtx[1,2] <- runif(1) * 2 - 1
mtx[2,1] <- mtx[1,2]
Sigmas.actual[[k]] <- mtx * exp(rnorm(1))
}
View(Sigmas.actual)
ws <- runif(K)
ws <- ws/sum(ws)
ws <- runif(K)
ws <- ws/sum(ws)
?rmvnorm
?rep
n <- 1000
p <- 2
xs <- matrix(0,n,p)
cols <- rep(0,n)
for (i in 1:n) {
k <- sample(K,1, prob = ws)
xs[i,] <- rmvnorm(n = 1, mean = mus.actual[k,], sigma = Sigmas.actual[[k]])
cols[i] <- k
}
plot(xs, col = cols, pch = 20)
n <- 1000
p <- 2
xs <- matrix(0,n,p)
cols <- rep(0,n)
for (i in 1:n) {
k <- sample(K,1, prob = ws)
xs[i,] <- rmvnorm(n = 1, mean = mus.actual[k,], sigma = Sigmas.actual[[k]])
cols[i] <- k
}
plot(xs, col = cols, pch = 20)
for (i in 1:n) {
k <- sample(K,1, prob = ws)
xs[i,] <- rmvnorm(n = 1, mean = mus.actual[k,], sigma = Sigmas.actual[[k]])
cols[i] <- k
}
plot(xs, col = cols, pch = 20)
mean(cols)
count(cols)
?count.fields
sum(cols == 1)
sum(cols == 2)
sum(cols == 3)
k
ws
ws <- runif(K)
ws <- ws/sum(ws)
ws
n <- 1000
p <- 2
xs <- matrix(0,n,p)
cols <- rep(0,n)
for (i in 1:n) {
k <- sample(K,1, prob = ws)
xs[i,] <- rmvnorm(n = 1, mean = mus.actual[k,], sigma = Sigmas.actual[[k]])
cols[i] <- k
}
plot(xs, col = cols, pch = 20)
source("em_mixture_gaussians.R")
print(system.time(out <- em_mixture gaussians(xs, K = 3)))
source("em_mixture_gaussians.R")
setwd("~/GitHub/ST340/Lab5")
source("em_mixture_gaussians.R")
setwd("~/GitHub/ST340/Lab4")
source("em_mixture_gaussians.R")
print(system.time(out <- em_mixture_gaussians(xs, K = 3)))
print(system.time(out <- em_mixture_gaussian(xs, K = 3)))
print(system.time(out <- em_mix_gaussian(xs, K = 3)))
v1 <- sum(abs(out$mus - mus.actual))
v2 <- sum(abs(out$mus[2:1,] - mus.actual))
vm <- min(v1, v2)/p/2
print(vm)
if (vm> 0.3) print("Probably  shit happened")else print("aaaa kurwa dziala")
v1 <- sum(abs(out$mus - mus.actual))
v2 <- sum(abs(out$mus[2:1,] - mus.actual))
v2 <- sum(abs(out$mus[1:2,] - mus.actual))
v2 <- sum(abs(out$mus[1:2,] - mus.actual))
View(out)
v2 <- sum(abs(out$mus[2:1,] - mus.actual))
print(system.time(out <- em_mix_gaussian(xs, K =  2)))
n <- 500; p <- 50
K.actual <- 2
mix <- runif(K.actual); mix <- mix / sum(mix)
mus.actual <- matrix(runif(K.actual*p),K.actual,p)
zs.actual <- rep(0,n)
xs <- matrix(0,n,p)
for (i in 1:n) {
cl <- sample(K.actual,size=1,prob=mix)
zs.actual[i] <- cl
xs[i,] <- (runif(p) < mus.actual[cl,])
}
print(system.time(out <- em_mix_gaussian(xs, K.actual)))
v2 <- sum(abs(out$mus[2:1,] - mus.actual))
vm <- min(v1, v2)/p/2
print(vm)
v2 <- sum(abs(out$mus[2:1,] - mus.actual))
v2 <- sum(abs(out$mus[1:2,] - mus.actual))
v2 <- sum(abs(out$mus[1:2,] - mus.actual))
print(system.time(out <- em_mix_gaussian(xs, K.actual)))
n <- 500; p <- 50
K.actual <- 2
mix <- runif(K.actual); mix <- mix / sum(mix)
mus.actual <- matrix(runif(K.actual*p),K.actual,p)
zs.actual <- rep(0,n)
xs <- matrix(0,n,p)
for (i in 1:n) {
cl <- sample(K.actual,size=1,prob=mix)
zs.actual[i] <- cl
xs[i,] <- (runif(p) < mus.actual[cl,])
}
print(system.time(out <- em_mix_bernoulli(xs, K.actual)))
## EM algorithm for a mixture of multivariate Gaussians
## we need this to calculate the density of a multivariate normal
library(mvtnorm)
## logsumexp(x) returns log(sum(exp(x))) but performs the computation in a more stable manner
logsumexp <- function(x) return(log(sum(exp(x - max(x)))) + max(x))
# compute the log-likelihood using expression ell(q,theta)
compute_ll <- function(xs,mus,Sigmas,lws,gammas) {
ll <- 0
n <- dim(xs)[1]
K <- dim(mus)[1]
for (i in 1:n) {
for (k in 1:K) {
if (gammas[i,k] > 0) {
ll <- ll + gammas[i,k]*(lws[k]+dmvnorm(xs[i,],mus[k,],Sigmas[[k]],log=TRUE)-log(gammas[i,k]))
}
}
}
return(ll)
}
